---
title: "AE 04: NYC flights + data wrangling"
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(nycflights13)
```

## Exercise 1

**Your turn:** Fill in the blanks:

The `flights` data frame has `{r} nrow(flights)` rows. Each row represents a *flight that left New York City in 2013.*.

## Exercise 2

**Your turn:** What are the names of the variables in `flights`.

```{r}
#| label: column-names

# add code here
names(flights)

```

## Exercise 3 - `select()`

-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}
#| label: select-vars

# add code her
flights |>
  select(dep_delay,arr_delay)

```

-   Make a data frame that keeps every variable except `dep_delay`.

```{r}
#| label: exclude-vars

# add code here
flights |>
  select(-dep_delay)

```

-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}
#| label: include-range

# add code here
flights |>
  select(year:dep_delay)

```

-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr_"` in the name.

```{r}
#| label: arr-vars

# add code here

flights |>
  select(contains("arr_"))

```

## Exercise 4 - `slice()`

-   Display the first five rows of the `flights` data frame.

```{r}
#| label: slice

# add code here
flights |> 
  slice_head(n=5)

```

-   Display the last two rows of the `flights` data frame.

```{r}
#| label: last-two

# add code here
flights |> 
  slice_tail(n=2)
```

## Exercise 5 - `arrange()`

-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.

```{r}
#| label: arrange-delays

# add code here
flights |>
  arrange(dep_delay)

```

-   Question: What does it mean for the `dep_delay` to have a negative value?

These flights left early: their departure time is before their scheduled departure time.

-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.

```{r}
#| label: arrange-delays-desc

# add code here
flights |>
  arrange(desc(dep_delay))
```

-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}
#| label: longest-delay

# add code here
flights |>
  arrange(dep_delay) |>
  select(tailnum, carrier, dep_delay) |>
  slice_head(n=1)
```

## Exercise 6 - `filter()`

-   Filter for all rows where the destination airport is RDU.

```{r}
#| label: rdu

# add code here
flights |>
  filter(dest == "RDU")
```

-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.

```{r}
#| label: rdu-ontime

# add code here
flights |>
  filter(dest == "RDU" & arr_delay < 0)
```

-   **Your turn:** Describe what the code is doing in words.

It's loading the `flights` dataframe and passing it to the filter function. The filter function is then checking each row for whether its `dest` variable has the value of "RDU" or "GSO" **AND** whether it left or arrived early. All rows that meet these logically conditions are included in the output. In other words, it must be destined for RDU/GSO, and either have arrived early, left early, or both.

```{r}
#| label: nc-early

flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
  )
```

**Hint:** Logical operators in R:

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## Exercise 7 - `count()`

-   Create a frequency table of the destination locations for flights from New York.

```{r}
#| label: count-dest

# add code here
flights |>
  count(dest)
```

-   In which month was there the fewest number of flights? How many flights were there in that month?

```{r}
#| label: count-month

# add code here
flights |>
  count(month) |>
  arrange(n) |>
  slice_head(n = 1)
```
The fewest flights were in February. There were 24,951 flights.

-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?

```{r}
#| label: count-date

# add code here
flights |>
  count(month, day, sort = TRUE) |>
  slice_head(n=1)
```
The day with the most flights was November 27. There were 1014 flights that day.

## Exercise 8 - `mutate()`

-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.

```{r}
#| label: calculate-mph

# add code here
flights |>
  mutate(mph = distance / (air_time / 60 )) |> 
  select(tailnum, mph)

```

-   **Your turn:** First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?

```{r}
#| label: months-prop

# add code here
#

flights |> 
  count(month) |>
  mutate(prop_flights = n / 336776) %>%
  filter(month == 7)

```
8.7% of flights took place in July.

-   Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.

```{r}
#| label: rdu-origin-prop
# add code here
flights |> 
  mutate(rdu_bound = (dest == "RDU")) |> 
  count(origin, rdu_bound) |> 
  group_by(origin) |> 
  mutate(prop = n / sum(n))
  
```
EWR$\to$RDU: 1.2%.\newline
JFK$\to$RDU: 2.7%.\newline
LGA$\to$RDU: 3.4%.\newline

## Exercise 9 - `summarize()`

-   Find mean arrival delay for all flights.

```{r}
#| label: find-arrival-delay

# add code here
flights |> 
  summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE))

```
The mean delay is about 7 minutes.

## Exercise 10 - `group_by()`

-   Find mean arrival delay for for each month.

```{r}
#| label: mean-arr-delay-month

# add code here
flights |> 
  group_by(month) |> 
  summarize(mean_month_arr_delay = mean(arr_delay, na.rm = TRUE))
```

-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?

```{r}
#| label: median-dep-dely-origin

# add code here
flights |>
  group_by(origin) %>%
  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))

```
LGA's median delay is the "shortest", with half of all flights from there departing 3 or more minutes early. 

# Additional Practice

Try these on your own, either in class if you finish early, or after class.

1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*

```{r}
#| label: add-practice-1

# add code here
```

2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.

```{r}
#| label: add-practice-2

# add code here
```
